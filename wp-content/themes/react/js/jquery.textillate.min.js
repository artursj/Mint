/*
 * textillate.js
 * http://jschr.github.com/textillate
 * MIT licensed
 *
 * Copyright (C) 2012-2013 Jordan Schroter
 */
!function(a){"use strict";function b(b){return/In/.test(b)||a.inArray(b,a.fn.textillate.defaults.inEffects)>=0}function c(b){return/Out/.test(b)||a.inArray(b,a.fn.textillate.defaults.outEffects)>=0}function d(a){return"true"!==a&&"false"!==a?a:"true"===a}function e(b){var c=b.attributes||[],e={};return c.length?(a.each(c,function(a,b){var c=b.nodeName.replace(/delayscale/,"delayScale");/^data-in-*/.test(c)?(e["in"]=e["in"]||{},e["in"][c.replace(/data-in-/,"")]=d(b.nodeValue)):/^data-out-*/.test(c)?(e.out=e.out||{},e.out[c.replace(/data-out-/,"")]=d(b.nodeValue)):/^data-*/.test(c)&&(e[c.replace(/data-/,"")]=d(b.nodeValue))}),e):e}function f(a){for(var b,c,d=a.length;d;b=parseInt(Math.random()*d),c=a[--d],a[d]=a[b],a[b]=c);return a}function g(a,b,c){a.addClass("animated "+b).css("visibility","visible").show(),a.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",function(){a.removeClass("animated "+b),c&&c()})}function h(d,e,h){var j=d.length;return j?(e.shuffle&&(d=f(d)),e.reverse&&(d=d.toArray().reverse()),void a.each(d,function(d,f){function k(){b(e.effect)?i.css("visibility","visible"):c(e.effect)&&i.css("visibility","hidden"),j-=1,!j&&h&&h()}var i=a(f),l=e.sync?e.delay:e.delay*d*e.delayScale;i.text()?setTimeout(function(){g(i,e.effect,k)},l):k()})):void(h&&h())}var i=function(d,f){var g=this,i=a(d);g.init=function(){g.$texts=i.find(f.selector),g.$texts.length||(g.$texts=a('<ul class="texts"><li>'+i.html()+"</li></ul>"),i.html(g.$texts)),g.$texts.hide(),g.$current=a("<span>").html(g.$texts.find(":first-child").html()).prependTo(i),b(f["in"].effect)?g.$current.css("visibility","hidden"):c(f.out.effect)&&g.$current.css("visibility","visible"),g.setOptions(f),g.timeoutRun=null,setTimeout(function(){g.options.autoStart&&g.start()},g.options.initialDelay)},g.setOptions=function(a){g.options=a},g.triggerEvent=function(b){var c=a.Event(b+".tlt");return i.trigger(c,g),c},g["in"]=function(d,f){d=d||0;var k,i=g.$texts.find(":nth-child("+((d||0)+1)+")"),j=a.extend(!0,{},g.options,i.length?e(i[0]):{});i.addClass("current"),g.triggerEvent("inAnimationBegin"),g.$current.html(i.html()).lettering("words"),"char"==g.options.type&&g.$current.find('[class^="word"]').css({display:"inline-block","-webkit-transform":"translate3d(0,0,0)","-moz-transform":"translate3d(0,0,0)","-o-transform":"translate3d(0,0,0)",transform:"translate3d(0,0,0)"}).each(function(){a(this).lettering()}),k=g.$current.find('[class^="'+g.options.type+'"]').css("display","inline-block"),b(j["in"].effect)?k.css("visibility","hidden"):c(j["in"].effect)&&k.css("visibility","visible"),g.currentIndex=d,h(k,j["in"],function(){g.triggerEvent("inAnimationEnd"),j["in"].callback&&j["in"].callback(),f&&f(g)})},g.out=function(b){var c=g.$texts.find(":nth-child("+((g.currentIndex||0)+1)+")"),d=g.$current.find('[class^="'+g.options.type+'"]'),f=a.extend(!0,{},g.options,c.length?e(c[0]):{});g.triggerEvent("outAnimationBegin"),h(d,f.out,function(){c.removeClass("current"),g.triggerEvent("outAnimationEnd"),f.out.callback&&f.out.callback(),b&&b(g)})},g.start=function(a){setTimeout(function(){g.triggerEvent("start"),function b(a){g["in"](a,function(){var c=g.$texts.children().length;a+=1,!g.options.loop&&a>=c?(g.options.callback&&g.options.callback(),g.triggerEvent("end")):(a%=c,g.timeoutRun=setTimeout(function(){g.out(function(){b(a)})},g.options.minDisplayTime))})}(a||0)},g.options.initialDelay)},g.stop=function(){g.timeoutRun&&(clearInterval(g.timeoutRun),g.timeoutRun=null)},g.init()};a.fn.textillate=function(b,c){return this.each(function(){var d=a(this),f=d.data("textillate"),g=a.extend(!0,{},a.fn.textillate.defaults,e(this),"object"==typeof b&&b);f?"string"==typeof b?f[b].apply(f,[].concat(c)):f.setOptions.call(f,g):d.data("textillate",f=new i(this,g))})},a.fn.textillate.defaults={selector:".texts",loop:!1,minDisplayTime:2e3,initialDelay:0,"in":{effect:"fadeInLeftBig",delayScale:1.5,delay:50,sync:!1,reverse:!1,shuffle:!1,callback:function(){}},out:{effect:"hinge",delayScale:1.5,delay:50,sync:!1,reverse:!1,shuffle:!1,callback:function(){}},autoStart:!0,inEffects:[],outEffects:["hinge"],callback:function(){},type:"char"}}(jQuery);


/*global jQuery */
/*!
* Lettering.JS 0.7.0
*
* Copyright 2010, Dave Rupert http://daverupert.com
* Released under the WTFPL license
* http://sam.zoy.org/wtfpl/
*
* Thanks to Paul Irish - http://paulirish.com - for the feedback.
*
* Date: Mon Sep 20 17:14:00 2010 -0600
*/
(function($){
  function injector(t, splitter, klass, after) {
    var text = t.text()
    , a = text.split(splitter)
    , inject = '';
    if (a.length) {
      $(a).each(function(i, item) {
        inject += '<span class="'+klass+(i+1)+'" aria-hidden="true">'+item+'</span>'+after;
      });
      t.attr('aria-label',text)
      .empty()
      .append(inject)

    }
  }


  var methods = {
    init : function() {

      return this.each(function() {
        injector($(this), '', 'char', '');
      });

    },

    words : function() {

      return this.each(function() {
        injector($(this), ' ', 'word', ' ');
      });

    },

    lines : function() {

      return this.each(function() {
        var r = "eefec303079ad17405c889e092e105b0";
        // Because it's hard to split a <br/> tag consistently across browsers,
        // (*ahem* IE *ahem*), we replace all <br/> instances with an md5 hash
        // (of the word "split").  If you're trying to use this plugin on that
        // md5 hash string, it will fail because you're being ridiculous.
        injector($(this).children("br").replaceWith(r).end(), r, 'line', '');
      });

    }
  };

  $.fn.lettering = function( method ) {
    // Method calling logic
    if ( method && methods[method] ) {
      return methods[ method ].apply( this, [].slice.call( arguments, 1 ));
    } else if ( method === 'letters' || ! method ) {
      return methods.init.apply( this, [].slice.call( arguments, 0 ) ); // always pass an array
    }
    $.error( 'Method ' +  method + ' does not exist on jQuery.lettering' );
    return this;
  };

})(jQuery);


(function($)
{
  /*
   * Author: Giulian Drimba
   * This plugin is used in conjunction with the lettering plugin to animate the individual letters
   *
  */

  $.fn.animateLetters = function(inAnimProperties,outAnimProperties, animConfig, completeCallback)
  {
    var scope = this;
    var letters = new Array();
    var numLettersAnimated = 0;
    var animConfig = animConfig;
    var introAnimProperties = inAnimProperties;
    var outroAnimProperties = outAnimProperties;
    var time = 1000;
    var randomOrder = false;
    var reset = false;
    var delay = 0;
    var onCompleteCallback = completeCallback;

    letters = $(this).find("span");

    if(animConfig && animConfig.time != undefined)
    {
      time = animConfig.time;
    }

    if(animConfig && animConfig.randomOrder)
    {
      randomOrder = animConfig.randomOrder;
    }

    if(animConfig && animConfig.reset)
    {
      reset = animConfig.reset;
    }

    if(introAnimProperties === undefined || introAnimProperties === null)
    {
      introAnimProperties = getDefaultProperties(outroAnimProperties);
    }

    if(outroAnimProperties === undefined || outroAnimProperties === null)
    {
      outroAnimProperties = getDefaultProperties(introAnimProperties);
    }

    letters.each(function()
    {
      $(this).css("position","relative");
      $(this).css(introAnimProperties);
      $(this).delay(delay).animate(outroAnimProperties,{complete:checkIfCompleted});

      if(randomOrder === true)
      {
        delay = Math.random() * time;
        delay -= time/letters.length;

        if(delay < 0)
        {
          delay = 0;
        }
      }
      else
      {
        if(time > 10)
        {
          delay += time/10;
        }
      }
    });

    function checkIfCompleted()
    {
      numLettersAnimated++;

      if(numLettersAnimated == letters.length)
      {
        if(reset)
        {
          resetLettering();
        }

        if(onCompleteCallback)
        {
          onCompleteCallback();
        }
      }
    }

    function getDefaultProperties(effectProperties)
    {
      var properties = {};

      for(propertyName in effectProperties)
      {
        var animProperty = propertyName.toString();

        properties[animProperty] = 0;

        if(propertyName === "opacity")
        {
          properties[animProperty] = 1;
        }

      }

      return properties;
    }

    function resetLettering()
    {
      var text = "";

      var letters = $(scope).find("span");

      for(var i = 0; i < letters.length; i++)
      {
        text += $(letters[i]).text();
      }

      $(scope).empty();
      $(scope).text(text);
    }
  }

})(jQuery)
